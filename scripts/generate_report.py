#!/usr/bin/env python3
"""
Ollama Pulse - Report Generation
Generates comprehensive Markdown reports from insights
"""
import json
import os
from datetime import datetime
from pathlib import Path


def ensure_reports_dir():
    """Create reports directory if it doesn't exist"""
    Path("reports").mkdir(parents=True, exist_ok=True)


def get_today_filename():
    """Get filename for today's report"""
    today = datetime.now().strftime("%Y-%m-%d")
    return f"reports/pulse-{today}.md"


def load_data():
    """Load aggregated data and insights"""
    today = datetime.now().strftime("%Y-%m-%d")
    
    # Load aggregated data
    agg_file = f"data/aggregated/{today}.json"
    aggregated = []
    if os.path.exists(agg_file):
        with open(agg_file, 'r') as f:
            aggregated = json.load(f)
    
    # Load insights
    insights_file = f"data/insights/{today}.json"
    insights = {}
    if os.path.exists(insights_file):
        with open(insights_file, 'r') as f:
            insights = json.load(f)
    
    return aggregated, insights


def generate_report(aggregated, insights):
    """Generate Markdown report"""
    today = datetime.now().strftime("%Y-%m-%d")
    
    report = f"""# 📡 Ollama Cloud Pulse – {today}

*Automated ecosystem intelligence from Ollama Pulse*

---

## 📊 Summary

- **Total Entries**: {len(aggregated)}
- **Patterns Detected**: {insights.get('stats', {}).get('total_patterns', 0)}
- **Inferences Generated**: {insights.get('stats', {}).get('total_inferences', 0)}
- **Last Updated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}

---

## 🚀 Official Updates

"""
    
    # Official updates
    official = [e for e in aggregated if e.get('source') in ['blog', 'cloud_page']]
    if official:
        report += "| Date | Title | Source | URL |\n"
        report += "|------|-------|--------|-----|\n"
        for entry in official[:10]:
            date = entry.get('date', '')[:10]
            title = entry.get('title', 'N/A')
            source = entry.get('source', 'N/A')
            url = entry.get('url', '#')
            report += f"| {date} | {title} | {source} | [Link]({url}) |\n"
    else:
        report += "*No official updates found today*\n"
    
    report += "\n---\n\n## 🛠️ Community Tools & Integrations\n\n"
    
    # Community tools
    tools = [e for e in aggregated if e.get('source') in ['github', 'reddit']]
    if tools:
        report += "| Title | Source | Highlights | URL |\n"
        report += "|-------|--------|------------|-----|\n"
        for entry in tools[:15]:
            title = entry.get('title', 'N/A')
            source = entry.get('source', 'N/A')
            highlights = ', '.join(entry.get('highlights', [])[:2])
            url = entry.get('url', '#')
            report += f"| {title} | {source} | {highlights} | [Link]({url}) |\n"
    else:
        report += "*No community tools found today*\n"
    
    report += "\n---\n\n## 📈 Emerging Patterns\n\n"
    
    # Patterns
    patterns = insights.get('patterns', {})
    if patterns:
        for pattern_name, items in patterns.items():
            report += f"### {pattern_name.replace('_', ' ').title()}\n\n"
            report += f"*{len(items)} items detected*\n\n"
            for item in items[:5]:
                title = item.get('title', 'N/A')
                url = item.get('url', '#')
                report += f"- [{title}]({url})\n"
            report += "\n"
    else:
        report += "*No patterns detected today*\n"
    
    report += "\n---\n\n## 🔔 Inferences & Alerts\n\n"
    
    # Inferences
    inferences = insights.get('inferences', [])
    if inferences:
        for inf in inferences:
            pattern = inf.get('pattern', 'N/A')
            observation = inf.get('observation', 'N/A')
            inference = inf.get('inference', 'N/A')
            confidence = inf.get('confidence', 'medium')
            
            emoji = "🔥" if confidence == "high" else "💡"
            report += f"{emoji} **{pattern.replace('_', ' ').title()}**\n\n"
            report += f"- Observation: {observation}\n"
            report += f"- Inference: {inference}\n"
            report += f"- Confidence: {confidence}\n\n"
    else:
        report += "*No inferences generated today*\n"
    
    report += "\n---\n\n## 📚 About Ollama Pulse\n\n"
    report += "Ollama Pulse is a GitHub-native innovation miner that tracks the Ollama ecosystem.\n\n"
    report += "- **Repository**: https://github.com/Grumpified-OGGVCT/ollama_pulse\n"
    report += "- **Dashboard**: http://127.0.0.1:8081/admin/pulse\n"
    report += "- **Powered by**: GitHub Actions + Pages\n\n"
    report += "*This report was automatically generated by Ollama Pulse*\n"
    
    return report


def save_report(report):
    """Save report to file"""
    filename = get_today_filename()
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"💾 Saved report to {filename}")
    
    # Also create/update index.html for GitHub Pages
    create_index_html(report)


def create_index_html(report):
    """Create index.html for GitHub Pages"""
    # Convert Markdown to simple HTML
    html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ollama Pulse - Ecosystem Intelligence</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            background: #0f172a;
            color: #e2e8f0;
        }}
        h1, h2, h3 {{ color: #60a5fa; }}
        table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
        th, td {{ padding: 12px; text-align: left; border-bottom: 1px solid #334155; }}
        th {{ background: #1e293b; color: #60a5fa; }}
        a {{ color: #60a5fa; text-decoration: none; }}
        a:hover {{ text-decoration: underline; }}
        .summary {{ background: #1e293b; padding: 20px; border-radius: 8px; margin: 20px 0; }}
    </style>
</head>
<body>
    <pre>{report}</pre>
    <hr>
    <p style="text-align: center; color: #64748b;">
        Powered by <a href="https://github.com/Grumpified-OGGVCT/ollama_pulse">Ollama Pulse</a>
    </p>
</body>
</html>"""
    
    with open("reports/index.html", 'w', encoding='utf-8') as f:
        f.write(html)
    
    print("💾 Created reports/index.html for GitHub Pages")


def main():
    """Main report generation function"""
    print("🚀 Starting report generation...")
    ensure_reports_dir()
    
    # Load data
    aggregated, insights = load_data()
    
    if not aggregated and not insights:
        print("⚠️  No data to generate report")
        return
    
    # Generate report
    report = generate_report(aggregated, insights)
    
    # Save
    save_report(report)
    
    print("✅ Report generation complete!")


if __name__ == "__main__":
    main()

